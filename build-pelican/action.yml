name: Build a Pelican Website
description: "Generate a Pelican website from Markdown"    
inputs:
  destination:
    description: "Pelican Output branch"
    required: true
    default: 'asf-site'
  output:
    description: "Output directory in output branch"
    required: false
    default: 'output'
  image:
    description: "Docker Image"
    required: false
    default: 'ghcr.io/apache/infrastructure-pelican:latest'
  tempdir:
    description: "Name of temporary directory. Must not exist in source or output branches."
    required: false
    default: 'output.tmp'
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        filter: tree:0 # This reduces download time whilst still giving access to other branches
        fetch-depth: 0 # Required for multi-branch checkouts
        show-progress: false # does not yet work for checkout unfortunately
    - name: Identify Committer
      shell: bash
      run: |
        git config --global user.email "users@infra.apache.org"
        git config --global user.name "Build Pelican (action)"
    - name: Run Docker Pelican build => ${{ inputs.tempdir }}
      shell: bash
      run: |
        docker run --quiet -v $PWD:/site --entrypoint bash ${{ inputs.image }} \
          -c "source /tmp/pelican-asf/LIBCMARKDIR.sh && python3 -m pelican content -o ${{ inputs.tempdir }}"
    - name: Checkout site deploy branch
      shell: bash
      run: |
        if git checkout ${{ inputs.destination }}
        then
          git pull origin ${{ inputs.destination }}
        else
          echo "branch ${{ inputs.destination }} is new; create basic site"
          git config --global --add --bool push.autoSetupRemote true
          git checkout --orphan ${{ inputs.destination }} -f
          git rm -rf .
          # TODO: does it make sense to copy the source version of the file?
          # What is actually needed by the site branch?
          # assume we have an asf.yaml file
          git checkout origin/${{ github.ref_name }} -- .asf.yaml
          git add .asf.yaml -f
        fi
    - name: Commit changes from ${{ inputs.tempdir }}
      shell: bash
      run: |
        # Remove all existing output so deletions will be captured
        rm -rf ${{ inputs.output }}
        git rm --quiet -r --ignore-unmatch --cached ${{ inputs.output }}/*
        # replace with generated output
        mv ${{ inputs.tempdir }} ${{ inputs.output }}
        git diff # Show changes
        git add ${{ inputs.output }}
        git status
        if git commit -m "Commit build products"
        then
          git push
        else
          echo "No change"
          true # ensure step is successful
        fi
