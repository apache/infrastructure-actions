name: Build a Pelican Website
description: "Generate a Pelican website from Markdown"    
inputs:
  destination:
    description: "Pelican Output branch"
    required: true
    default: "asf-site"
  gfm:
    description: "Uses GitHub Flavored Markdown"
    required: false
    default: 'true'
  output:
    description: "Pelican generated output directory"
    required: false
    default: 'output'
  tempdir:
    description: "Temporary Directory name"
    required: false
    default: '../output.tmp'
  debug:
    description: "Pelican Debug mode"
    required: false
    default: 'false'
  version:
    description: "Pelican Version (default 4.5.4)"
    required: false
    default: '4.5.4'
  fatal:
    description: "Value for --fatal option [errors|warnings] - sets exit code to error (default: errors)"
    required: false
    default: 'errors'
runs:
  using: "composite"
  steps:
    - name: Install Pelican
      shell: bash
      # Install needs to run in separate shell so stdout is restored
      run: |
        (
          test "${{ inputs.debug }}" == 'true' || exec >/dev/null
          pip3 install pelican==${{ inputs.version }} markdown bs4 ezt requests
        )
        python3 -V
        echo "Pelican version:"
        pelican --version
        if [ "${{ inputs.debug }}" == 'true' ]
        then
          pip3 list # This a long list
        fi

    # If the site uses Github Flavored Markdown, use this build branch
    - name: fetch and build libcmark-gfm.so
      if: ${{ inputs.gfm == 'true' }}
      id: build_gfm
      shell: bash
      env:
        WORKDIR: /opt/pelican-asf # where to build GFM
        GFM_VERSION: '0.28.3.gfm.12' # ensure we agree with build-cmark.sh script
        # action_repository only works in the env context; empty for local action call
        # it is always empty for local invocation, in which case use the current repo
        GITHUB_ACTION_REPO: ${{ github.action_repository || github.repository }}
        GH_TOKEN: ${{ github.token }} # needed by gh
      run: |
        # The key needs to include the GFM version, but does not have to be the same as the directory name
        # must agree with the definition in build-actions.yml
        export GFM_ARTIFACT_KEY=gfm-lib-${GFM_VERSION}
        # Needs to be available to a subsequent step
        echo  "GFM_VERSION=${GFM_VERSION}" >>$GITHUB_ENV
        echo  "GFM_ARTIFACT_KEY=${GFM_ARTIFACT_KEY}" >>$GITHUB_ENV
        if [[ -z $LIBCMARKDIR ]] # don't overwrite LIBCMARKDIR if it exists
        then
          # set up the GFM environment
          # Don't pollute site checkout
          mkdir -p $WORKDIR
          pushd $WORKDIR >/dev/null # ensure LIBCMARKDIR is under WORKDIR
            NOBUILD=1 bash ${{ github.action_path }}/build-cmark.sh $GFM_VERSION | grep "export LIBCMARKDIR" >/tmp/libcmarkdir1.$$
            source /tmp/libcmarkdir1.$$
            echo  "LIBCMARKDIR=${LIBCMARKDIR}" >>$GITHUB_ENV
          popd >/dev/null
        fi
        # Does the GFM build already exist?
        if [[ -d $LIBCMARKDIR ]]
        then
          echo "Already have GFM binary at $LIBCMARKDIR, skipping build"
          exit 0 # nothing more to do in this step
        fi

        # Is there a saved artifact for the GFM build?
        echo "Check for GFM build artifact in action repo: $GITHUB_ACTION_REPO"
        gh run download --dir ${LIBCMARKDIR} --name ${GFM_ARTIFACT_KEY} --repo $GITHUB_ACTION_REPO || true
        if [[ -d $LIBCMARKDIR ]]
        then
          echo "Downloaded to ${LIBCMARKDIR} from $GITHUB_ACTION_REPO, nothing more to do!"
          exit 0 # nothing more to do in this step
        fi

        # GFM binary not found, need to build it
        {
          echo "Creating GFM binary in ${LIBCMARKDIR}"
          # disable stdout unless debug is on
          if [ "${{ inputs.debug }}" == 'true' ]
          then
            DEBUG_STEPS=1; export DEBUG_STEPS
          else
            exec >/dev/null
          fi
          # Don't pollute site checkout
          mkdir -p $WORKDIR
          pushd $WORKDIR
            # build the code and define LIBCMARKDIR
            bash ${{ github.action_path }}/build-cmark.sh $GFM_VERSION | grep "export LIBCMARKDIR" >/tmp/libcmarkdir.$$
            source /tmp/libcmarkdir.$$
          popd
          # ensure LIBCMARKDIR is defined for subsequent steps
          echo "LIBCMARKDIR=${LIBCMARKDIR}"  >> $GITHUB_ENV
        }

    - name: Generate website from markdown
      shell: bash
      run: |
        if [ "${{ inputs.debug }}" == 'true' ]
        then
          OPTS='-D'
        else
          OPTS=''
        fi
        if [ -n "${{ inputs.fatal }}" ]
        then
          OPTS="$OPTS --fatal ${{ inputs.fatal }}"
        fi
        echo "Getting plugins from action location: ${{ github.action_path }}"
        PP=$(python3 ${{ github.action_path }}/plugin_paths.py '${{ github.action_path }}/plugins')
        set -x # Show the expanded variables
        python3 -B -m pelican content -e "$PP" -o ${{ inputs.tempdir }} $OPTS

    - name: Check out previous branch
      shell: bash
      run: | 
        git config --global user.email "private@infra.apache.org"
        git config --global user.name "Build Pelican (action)"
        git remote update
        if git checkout ${{ inputs.destination }}
        then
          git pull origin ${{ inputs.destination }}
        else
          # if none, create it.
          echo "branch ${{ inputs.destination }} is new; create empty site"
          git switch --orphan ${{ inputs.destination }}
          git checkout origin/${{ github.ref_name }} -- .asf.yaml
          git add .asf.yaml -f
          git commit -m "Initialise empty site"
          git push -u origin ${{ inputs.destination }}
        fi

    - name: Commit Directly to the branch
      shell: bash
      run: |
        # Remove all existing output so deletions will be captured
        rm -rf ${{ inputs.output }}
        git rm --quiet -r --ignore-unmatch --cached ${{ inputs.output }}/*
        # replace with generated output
        mv ${{ inputs.tempdir }} ${{ inputs.output }}
        git diff # Show changes
        git add ${{ inputs.output }}
        git status
        if git commit -m "Commit build products"
          then
              git push
        else
          echo "No change"
          true # ensure step is successful
        fi
