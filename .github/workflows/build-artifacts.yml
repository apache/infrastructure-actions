name: Build GFM artifacts

# Builds the GFM library as artifacts that can be used by other workflows
#
# It checks for any existing artifacts with an expiry date at least 10 days after today
# If none are found, the library is built and uploaded.

# This workflow can be run on demand, but is intended to be run on a weekly schedule
# This should ensure that there is always at least one artifact available but no more than 2

on:
  # Schedule once a week
  schedule:
    - cron: '11 12 * * 0'
  push:
    paths:
      - '**/build-artifacts.yml' # self
      - 'pelican/build-cmark.sh'
  workflow_dispatch:

jobs:
  build-artifact:
    runs-on: ubuntu-latest
    strategy:
      # Allow for multiple versions to be maintained
      matrix:
        gfm_version:
        - '0.28.3.gfm.12'
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Fetch and build version ${{ matrix.gfm_version }}
      id: build_gfm
      env:
        gfm_version: ${{ matrix.gfm_version }}
      run: |
        # N.B. This must agree with the definition in pelican/action.yml
        export GFM_ARTIFACT_KEY=gfm-lib-${gfm_version}
        echo "GFM_ARTIFACT_KEY=${GFM_ARTIFACT_KEY}" >> $GITHUB_ENV

        # Check if artifact is present (list all)
        curl -sS https://api.github.com/repos/$GITHUB_REPOSITORY/actions/artifacts?name=${GFM_ARTIFACT_KEY} >/tmp/artifact.json
        # when does last one expire?
        jq </tmp/artifact.json '[.artifacts[]|select(.expired==false)|.expires_at]|max' >/tmp/max.txt
        # is that more than 10 days away? (86400*10 seconds)
        OUT=$(jq </tmp/max.txt 'select(.>(now+864000|strftime("%FT%TZ")))')
        if [[ -n $OUT ]]
        then
          echo "Found a valid artifact for ${gfm_version} (expires $OUT)"
          exit 0 # No more to do
        fi

        echo "Could not find a valid artifact for ${gfm_version}; building another"
        # build GFM and set up LIBCMARKDIR
        export LIBCMARKDIR=/tmp/gfm-${gfm_version}
        mkdir -p ${LIBCMARKDIR}
        bash $GITHUB_WORKSPACE/pelican/build-cmark.sh ${gfm_version} ${LIBCMARKDIR}

        # Tell the save step what to save
        echo "created=${LIBCMARKDIR}" | tee -a $GITHUB_OUTPUT
    - name: Save the GFM build ${{ matrix.gfm_version }}
      if: ${{ steps.build_gfm.outputs.created }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.GFM_ARTIFACT_KEY }}
        path: ${{ steps.build_gfm.outputs.created }}
